// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks/mock_interfaces.go -package=mocks -self_package=github.com/alc6/mig2schema
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Migration represents a database migration file
type Migration struct {
	Name     string
	UpFile   string
	DownFile string
}

// Table represents a database table
type Table struct {
	Name    string
	Columns []Column
	Indexes []Index
}

// Column represents a database column
type Column struct {
	Name         string
	DataType     string
	IsNullable   bool
	DefaultValue sql.NullString
	IsPrimaryKey bool
}

// Index represents a database index
type Index struct {
	Name     string
	Columns  []string
	IsUnique bool
}

// MockDatabaseManager is a mock of DatabaseManager interface.
type MockDatabaseManager struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseManagerMockRecorder
	isgomock struct{}
}

// MockDatabaseManagerMockRecorder is the mock recorder for MockDatabaseManager.
type MockDatabaseManagerMockRecorder struct {
	mock *MockDatabaseManager
}

// NewMockDatabaseManager creates a new mock instance.
func NewMockDatabaseManager(ctrl *gomock.Controller) *MockDatabaseManager {
	mock := &MockDatabaseManager{ctrl: ctrl}
	mock.recorder = &MockDatabaseManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseManager) EXPECT() *MockDatabaseManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabaseManager) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseManagerMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabaseManager)(nil).Close), ctx)
}

// GetDB mocks base method.
func (m *MockDatabaseManager) GetDB() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetDB indicates an expected call of GetDB.
func (mr *MockDatabaseManagerMockRecorder) GetDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockDatabaseManager)(nil).GetDB))
}

// RunMigrations mocks base method.
func (m *MockDatabaseManager) RunMigrations(migrations []Migration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunMigrations", migrations)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunMigrations indicates an expected call of RunMigrations.
func (mr *MockDatabaseManagerMockRecorder) RunMigrations(migrations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunMigrations", reflect.TypeOf((*MockDatabaseManager)(nil).RunMigrations), migrations)
}

// Setup mocks base method.
func (m *MockDatabaseManager) Setup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockDatabaseManagerMockRecorder) Setup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockDatabaseManager)(nil).Setup), ctx)
}

// MockSchemaExtractor is a mock of SchemaExtractor interface.
type MockSchemaExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaExtractorMockRecorder
	isgomock struct{}
}

// MockSchemaExtractorMockRecorder is the mock recorder for MockSchemaExtractor.
type MockSchemaExtractorMockRecorder struct {
	mock *MockSchemaExtractor
}

// NewMockSchemaExtractor creates a new mock instance.
func NewMockSchemaExtractor(ctrl *gomock.Controller) *MockSchemaExtractor {
	mock := &MockSchemaExtractor{ctrl: ctrl}
	mock.recorder = &MockSchemaExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemaExtractor) EXPECT() *MockSchemaExtractorMockRecorder {
	return m.recorder
}

// ExtractSchema mocks base method.
func (m *MockSchemaExtractor) ExtractSchema(db *sql.DB) ([]Table, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractSchema", db)
	ret0, _ := ret[0].([]Table)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractSchema indicates an expected call of ExtractSchema.
func (mr *MockSchemaExtractorMockRecorder) ExtractSchema(db any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractSchema", reflect.TypeOf((*MockSchemaExtractor)(nil).ExtractSchema), db)
}

// FormatSchema mocks base method.
func (m *MockSchemaExtractor) FormatSchema(tables []Table) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatSchema", tables)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatSchema indicates an expected call of FormatSchema.
func (mr *MockSchemaExtractorMockRecorder) FormatSchema(tables any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatSchema", reflect.TypeOf((*MockSchemaExtractor)(nil).FormatSchema), tables)
}

// FormatSchemaAsSQL mocks base method.
func (m *MockSchemaExtractor) FormatSchemaAsSQL(tables []Table) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatSchemaAsSQL", tables)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatSchemaAsSQL indicates an expected call of FormatSchemaAsSQL.
func (mr *MockSchemaExtractorMockRecorder) FormatSchemaAsSQL(tables any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatSchemaAsSQL", reflect.TypeOf((*MockSchemaExtractor)(nil).FormatSchemaAsSQL), tables)
}

// MockMigrationReader is a mock of MigrationReader interface.
type MockMigrationReader struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationReaderMockRecorder
	isgomock struct{}
}

// MockMigrationReaderMockRecorder is the mock recorder for MockMigrationReader.
type MockMigrationReaderMockRecorder struct {
	mock *MockMigrationReader
}

// NewMockMigrationReader creates a new mock instance.
func NewMockMigrationReader(ctrl *gomock.Controller) *MockMigrationReader {
	mock := &MockMigrationReader{ctrl: ctrl}
	mock.recorder = &MockMigrationReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMigrationReader) EXPECT() *MockMigrationReaderMockRecorder {
	return m.recorder
}

// DiscoverMigrations mocks base method.
func (m *MockMigrationReader) DiscoverMigrations(dir string) ([]Migration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverMigrations", dir)
	ret0, _ := ret[0].([]Migration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscoverMigrations indicates an expected call of DiscoverMigrations.
func (mr *MockMigrationReaderMockRecorder) DiscoverMigrations(dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverMigrations", reflect.TypeOf((*MockMigrationReader)(nil).DiscoverMigrations), dir)
}
